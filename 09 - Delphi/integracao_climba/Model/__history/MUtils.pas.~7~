unit MUtils;

interface

uses
  UControllerMessages,REST.JSON, System.JSON , System.Generics.Collections,System.TypInfo;
type
  TUtils = class
    private
    public
      class procedure MsgCodeStatusHTTP(codigo:integer);
      class function JsonStringParaObjeto(AjsonString: string): TObject;
      class function JsonStringParaObjetoList<T>(AjsonString: string):  T;
      class function ToJsonString(obj: TObject): string;
  end;

implementation

{ TCodeStatus }

class procedure TUtils.MsgCodeStatusHTTP(codigo:integer);
begin
  case codigo of
    201: TControllerMessages.CallSuccessMessage('201 - Indica que o processamento foi realizado corretamente e o retorno será conforme expectativa',false);
    400: TControllerMessages.CallErrorMessage('400 - Requisição mal formada, 1 ou mais parâmetros estão ausentes',false);
    401: TControllerMessages.CallErrorMessage('401 - Requisição requer autenticação',false);
    403: TControllerMessages.CallErrorMessage('403 - Requisição negada',false);
    404: TControllerMessages.CallErrorMessage('404 - Recurso não encontrado',false);
    405: TControllerMessages.CallErrorMessage('405 - Método não permitido',false);
    406: TControllerMessages.CallErrorMessage('406 - Parametros não aceitados',false);
    409: TControllerMessages.CallErrorMessage('409 - Um atributo já está cadastrado com o mesmo código',false);
    415: TControllerMessages.CallErrorMessage('415 - Corpo da requisição inválida',false);
    429: TControllerMessages.CallErrorMessage('429 - Limite de requisições atingido',false);
  end;
end;

{ TConverteJSON }

class function TUtils.JsonStringParaObjeto(AjsonString: string): TObject;
var
  JSonValue : TJSonValue;
begin
  JsonValue := TJSonObject.ParseJSONValue(AjsonString);
  Result := TJson.JsonToObject<TObject>(AjsonString);
end;

class function TUtils.JsonStringParaObjetoList<T>(AjsonString: string): T;
var
  listaJson : TJSONArray;
  JSonValue : TJSonValue;
  ObjectList: TObjectList<TObject>;
begin
  listaJson := TJSonObject.ParseJSONValue(AjsonString) as TJSONArray;
  ObjectList := TObjectList<TObject>.Create;
  for JSonValue in listaJson do
  begin
    ObjectList.AddRange(TJson.JsonToObject<TObject>(AjsonString));
  end;
  Result := ObjectList;
end;

class function TUtils.ToJsonString(obj: TObject): string;
begin
   result := TJson.ObjectToJsonString(obj);
end;

end.
